# -*- coding: utf-8 -*-
from .views import view

'''
def should_create(ddl, target, connection, **kw):
    row = connection.execute(
        "select conname from pg_constraint where conname='%s'" %
        ddl.element.name).scalar()
    return not bool(row)

def should_drop(ddl, target, connection, **kw):
    return not should_create(ddl, target, connection, **kw)

event.listen(
    users,
    "after_create",
    DDL(
        "ALTER TABLE users ADD CONSTRAINT "
        "cst_user_name_length CHECK (length(user_name) >= 8)"
    ).execute_if(callable_=should_create)
)
event.listen(
    users,
    "before_drop",
    DDL(
        "ALTER TABLE users DROP CONSTRAINT cst_user_name_length"
    ).execute_if(callable_=should_drop)
)

SQLusers.create(engine)

SQLusers.drop(engine)
'''


ALL_OPERATIONS_SELECT_SQL = '''
    {% for table_name in all_tables -%}
        {% if 'virtual' in table_name %}
    SELECT block_num,transaction_num,operation_num,id::text as id,operation_type FROM {{ table_name }}
        {% else %}
    SELECT block_num,transaction_num,operation_num,trx_id as id,operation_type FROM {{ table_name }}
        {% endif -%}
    {% if not loop.last %}UNION ALL{% endif %}
    {%- endfor -%};
'''

REAL_OPERATIONS_SELECT_SQL = '''
    {% for table_name in real_tables -%}
    SELECT block_num,transaction_num,operation_num,trx_id as id,operation_type FROM {{ table_name }}
    {% if not loop.last %}UNION ALL{% endif %}
    {% endfor -%};
'''

VIRTUAL_OPERATIONS_SELECT_SQL = '''
    {% for table_name in virtual_tables -%}
    SELECT block_num,transaction_num,operation_num,id::text as id,operation_type FROM {{ table_name }}
    {% if not loop.last %}UNION ALL{% endif %}
    {% endfor -%};
'''


def create_operations_view():
    from dpds.storages.db.tables import metadata
    operations_view = view('dpds_views_operations',metadata, OPERATIONS_SELECT_SQL)

create_operations_view()
