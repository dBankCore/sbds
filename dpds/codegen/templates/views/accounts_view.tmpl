# -*- coding: utf-8 -*-
from .views import view

'''
def should_create(ddl, target, connection, **kw):
    row = connection.execute(
        "select conname from pg_constraint where conname='%s'" %
        ddl.element.name).scalar()
    return not bool(row)

def should_drop(ddl, target, connection, **kw):
    return not should_create(ddl, target, connection, **kw)

event.listen(
    users,
    "after_create",
    DDL(
        "ALTER TABLE users ADD CONSTRAINT "
        "cst_user_name_length CHECK (length(user_name) >= 8)"
    ).execute_if(callable_=should_create)
)
event.listen(
    users,
    "before_drop",
    DDL(
        "ALTER TABLE users DROP CONSTRAINT cst_user_name_length"
    ).execute_if(callable_=should_drop)
)

SQLusers.create(engine)

SQLusers.drop(engine)
'''


ACCOUNTS_SELECT_SQL = '''
    {% for table_name,fields in grouped_refs.items() -%}
    SELECT
        block_num,
        transaction_num,
        operation_num,
        operation_type,
        trx_id,
        {% for col_name_value,col_name_name,col_field_value,col_field in fields -%}
        {{ col_name_value }} as {{ col_name_name }},
        {{ col_field_value }} as {{ col_field }}{% if not loop.last %},{% endif %}
        {%  endfor -%}
    FROM {{ table_name }}
    {% if not loop.last %}UNION ALL{% endif %}
    {% endfor -%};
'''

def create_accounts_view():
    from dpds.storages.db.tables import metadata
    accounts_view = view('dpds_views_accounts',metadata, ACCOUNTS_SELECT_SQL)

create_accounts_view()
